=== Instalando Eslint ===
Este pacote ajuda a corrigir problemas no código javascript, inclusive momentos onde acusar erro ao usar código
jsx em arquivo .js, onde podemos resolver entrando no arquivo do eslint e no rules colocar o seguinte código;
Se persistir o erro verificar no canto inferior, onde está escrito crlf e deixar como lf.

Comando básicos vsCode
cltr + p abre caixa de texto, comandos como >reaload...reseta o vscode

Para ativar o eslint, >eslint enable qualquer coisa no canto inferior direito, clicar e verificar as opções.
No geral para resolvermos erro de sintaxe com eslint é só ir no ctrl + p, digitar > eslint fix all auto problem
que será corrigido automaticamente.

PropTypes nos ajuda a fazer a validação de forma automática sem a necessidade de fazer na mão.


Json-server depois de instalado criamos o arquivo db.json com alguns dados para trabalhar, não esquecer de ir
no package.json e e nos script criar "server": "json-server --watch db.json --port8080" , depois para iniciar digitamos
npm run server. No browser no localhost:3000/categorias por exemplo ja acessamos os dados de categorias escritos
no arquivo de db.json.

npm install --save-dev concurrently - Com isso conseguimos rodar duas coisas ao mesmo tempo, no exemplo o
json-server e o react, depois de configurar desta forma no package.json "dev": "concurrently \"react-scripts start\" \"npm run server\"",
depois disso demos o comando npm run dev, e o resultado nosso projeto rodando na porta 3000, e o server na porta
8080.

Criamos o arquivo server.js colamos o código e no package.json trocamos nos scripts em server para:
 node ./server.js
 E no start trocar por npm run server, e quando dermos npm start no terminal irá executar normalmente o projeto.

 Para colocarmos o projeto na HEROKU para que nosso backend também vá para o ar, é preciso que nosso start esteja
 configurado para npm run server como citado acima, pois a HEROKU utiliza o start para subir para o ar e a vercel
 utiliza o comando de build.